{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","this","isRemoval","className","onClick","onAdd","track","onRemove","name","artist","album","renderAction","React","Component","TrackList","tracks","map","key","id","Playlist","handleNameChange","event","onNameChange","target","value","defaultValue","onChange","playlistTracks","onSave","SearchBar","state","term","search","handleTermChange","onSearch","setState","placeholder","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19702df5.chunk.js","sourcesContent":["const clientId = 'a19eba1fe0cc4d6b91f4bc7e60aae9e3'; // Insert client ID here.\r\nconst redirectUri = 'http://localhost:3000/callback'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris })\r\n                });\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }\r\n        else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist}  | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\n\r\nimport './TrackList.css';\r\n\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track}\r\n                            key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\r\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        }\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Playlist from '../Playlist/Playlist';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Spotify from '../../util/Spotify';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName: 'New Playlist',\r\n      playlistTracks: []\r\n    };\r\n\r\n    this.search = this.search.bind(this);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n  }\r\n\r\n  search(term) {\r\n    Spotify.search(term).then(searchResults => {\r\n      this.setState({ searchResults: searchResults });\r\n    });\r\n  }\r\n\r\n  addTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\r\n      return;\r\n    }\r\n\r\n    tracks.push(track);\r\n    this.setState({ playlistTracks: tracks });\r\n  }\r\n\r\n  removeTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\r\n\r\n    this.setState({ playlistTracks: tracks });\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n    this.setState({ playlistName: name });\r\n  }\r\n\r\n  savePlaylist() {\r\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\r\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\r\n      this.setState({\r\n        playlistName: 'New Playlist',\r\n        playlistTracks: []\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n          <SearchBar onSearch={this.search} />\r\n          <div className=\"App-playlist\">\r\n            <SearchResults searchResults={this.state.searchResults}\r\n              onAdd={this.addTrack} />\r\n            <Playlist playlistName={this.state.playlistName}\r\n              playlistTracks={this.state.playlistTracks}\r\n              onNameChange={this.updatePlaylistName}\r\n              onRemove={this.removeTrack}\r\n              onSave={this.savePlaylist} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}